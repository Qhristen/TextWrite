{"version":3,"sources":["Components/index.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","useState","font","penColor","fontSize","verticalPosition","wordSpacing","textArea","input","setInput","output","setOutPut","marginToggle","maginCheckbox","setMarginCheckbox","paperLine","PaperCheckbox","setPaperCheckbox","anchorEl","setAnchorEl","open","Boolean","id","undefined","border","background","display","fontFamily","fontSz","paddingTop","color","toggle","paper","marginT","styles","setStyles","fontChange","setFontChange","colorChange","setColorChange","SelectItem","e","formdata","FormData","append","axios","post","getFont","get","then","res","console","log","data","FileReader","onloadend","newFont","FontFace","blob","load","loadedFace","document","fonts","add","catch","handleChange","target","name","value","classes","makeStyles","theme","root","margin","spacing","width","typography","padding","useStyles","className","Container","style","Grid","container","item","xs","contentditable","role","onChange","contentEditable","InfoRounded","onClick","event","preventDefault","cursor","marginTop","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","Link","href","src","alt","Button","variant","fetch","method","headers","arrayBuffer","buffer","link","createElement","setAttribute","body","appendChild","click","err","onSubmit","page","querySelector","canvas","html2canvas","img","Image","toDataURL","TextField","type","file","files","defaultChecked","checked","min","placeholder","FormControl","formControl","InputLabel","Select","labelId","label","MenuItem","textDecoration","App","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cef76765.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport html2canvas from \"html2canvas\";\nimport { InfoRounded } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Button,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Container,\n  Popover,\n  Link,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\n\nconst FormInput = () => {\n  const [input, setInput] = useState({\n    font: \"\",\n    penColor: \"\",\n    fontSize: \"\",\n    verticalPosition: \"\",\n    wordSpacing: \"\",\n    textArea: \"\",\n  });\n  const [output, setOutPut] = useState(\"\");\n  const [maginCheckbox, setMarginCheckbox] = useState({\n    marginToggle: false,\n  });\n  const [PaperCheckbox, setPaperCheckbox] = useState({\n    paperLine: true,\n  });\n  const [anchorEl, setAnchorEl] = useState(false);\n  const handleClick = (event) => {\n    event.preventDefault();\n    setAnchorEl({ anchorEl: true });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(false);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  const [styles, setStyles] = useState({\n    border: \"\",\n    background: \"\",\n    display: \"none\",\n    fontFamily: \"\",\n    fontSz: \"\",\n    paddingTop: \"\",\n    wordSpacing: \"\",\n    color: \"\",\n    toggle: false,\n    paper: false,\n    marginT: \"\",\n  });\n\n  const [fontChange, setFontChange] = useState({ font: \"\" });\n  const [colorChange, setColorChange] = useState({ color: \"\" });\n\n  const color = (e) => {\n    setColorChange({ color: e.target.value });\n  };\n\n  const fontSelect = (e) => {\n    setFontChange({ font: e.target.value });\n  };\n\n  const generate = (e) => {\n    e.preventDefault();\n    const page = document.querySelector(\".page\");\n    const canvas = html2canvas(page).then((canvas) => {\n      const img = new Image();\n      img.src = canvas.toDataURL(\"image/jpeg\");\n      setOutPut(img.src);\n    });\n    setStyles({ toggle: true, display: \"block\", marginT: \"0px\" });\n    return canvas;\n  };\n\n  // const [file, setFile] = useState({ selectedFile: [] });\n  const fileChange = (e) => {\n    const file = e.target.files[0];\n    SelectItem(file);\n    getFont();\n  };\n\n  const SelectItem = (e) => {\n    const formdata = new FormData();\n    formdata.append(\"font\", e);\n    axios.post(\"http://localhost:4000/font\", formdata);\n  };\n\n  const getFont = () => {\n    axios.get(\"http://localhost:4000/fonta\").then((res) => {\n      console.log(\"ddd:\" + res.data);\n      let reader = new FileReader();\n      reader.onloadend = () => {\n        const newFont = new FontFace(\"new-font\", res.data.blob());\n        newFont\n          .load()\n          .then((loadedFace) => {\n            document.fonts.add(loadedFace);\n            console.log(\"font///:\" + loadedFace);\n            setStyles({ fontFamily: \"new-font\" });\n            // textareaEl.style.fontFamily = \"temp-font\";\n          })\n          .catch((e) => console.log(e));\n\n        console.log(\"bdhdh\" + newFont);\n      };\n    });\n  };\n\n  const addFontFromFile = (fileObj) => {\n    // console.log(fileObj);\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      // console.log(e);\n      const newFont = new FontFace(\"new-font\", fileObj);\n      newFont\n        .load()\n        .then((loadedFace) => {\n          document.fonts.add(loadedFace);\n          console.log(\"font///:\" + loadedFace);\n          setStyles({ fontFamily: \"new-font\" });\n          // textareaEl.style.fontFamily = \"temp-font\";\n        })\n        .catch((e) => console.log(e));\n\n      console.log(newFont);\n    };\n    // reader.readAsArrayBuffer(fileObj);\n    // reader.arrayBuffer(fileObj);\n  };\n\n  const font = (file) => {\n    const newF = new FontFace(\"new-font\", file);\n    newF\n      .onload()\n      .then((lof) => {\n        document.fonts.add(lof);\n        console.log(\"ff\" + lof);\n        setStyles({ fontFamily: \"new-font\" });\n      })\n      .catch((e) => console.log(e));\n  };\n\n  const download = (e) => {\n    fetch(e.target.href, {\n      method: \"GET\",\n      headers: {},\n    })\n      .then((res) => {\n        res.arrayBuffer().then((buffer) => {\n          // const uRL = window.URL.createObjectURL(new Blob([buffer]));\n          const link = document.createElement(\"a\");\n          link.href = output;\n          link.setAttribute(\"Download\", \"image.jpg\");\n          document.body.appendChild(link);\n          link.click();\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const marginChange = () => {\n    setMarginCheckbox({ marginToggle: !maginCheckbox.marginToggle });\n  };\n\n  const paperChange = () => {\n    setPaperCheckbox({ paperLine: !PaperCheckbox.paperLine });\n  };\n\n  // const [select, setSelect] = useState({\n  //   penColor: \"\",\n  //   fontFamily: \"\",\n  // });\n\n  // const selectedChange = (e) => {\n  //   let value = e.target.value;\n  //   setSelect({ penColor: value, fontFamily: value });\n  // };\n  const handleChange = (e) => {\n    setInput({ [e.target.name]: e.target.value });\n    setStyles({\n      fontSz: input.fontSize,\n      wordSpacing: input.wordSpacing,\n      paddingTop: input.verticalPosition,\n      display: styles.display === \"none\" ? \"none\" : \"block\",\n    });\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n        width: \"20ch\",\n      },\n    },\n    typography: {\n      padding: theme.spacing(2),\n    },\n  }));\n\n  const classes = useStyles();\n  // console.log(checkbox.paperLine);\n\n  return (\n    <div className=\"container\">\n      <Container style={{ margin: \"20px\" }}>\n        <Grid container spacing={2}>\n          <Grid item xs={5} style={{ background: \"white\" }}>\n            <div className=\"row output-grid responsive-row\">\n              <div className=\"col\">\n                <div\n                  className={`page  \n              ${maginCheckbox.marginToggle && \"margined-page\"}`}\n                  style={{\n                    border: styles.border,\n                    background: styles.background,\n                  }}\n                >\n                  <div\n                    className=\"paper-margin-top-line\"\n                    contentditable=\"true\"\n                  ></div>\n                  <div\n                    className={`textarea row ${\n                      PaperCheckbox.paperLine && \"paper\"\n                    }`}\n                  >\n                    <div className=\"paper-margin-left-line\"></div>\n                    <div\n                      role=\"textbox\"\n                      style={{\n                        fontSize: styles.fontSz + \"px\",\n                        fontFamily: fontChange.font || \"new-font\",\n                        wordSpacing: styles.wordSpacing + \"px\",\n                        paddingTop: styles.paddingTop + \"px\",\n                        color: colorChange.color,\n                      }}\n                      onChange={handleChange}\n                      name=\"note\"\n                      value={input.textArea}\n                      className={`paper-content`}\n                      id=\"note\"\n                      contentEditable=\"true\"\n                    >\n                      Hendrerit. Proin ipsum nisl, lacinia vitae purus\n                      ullamcorper, maximus convallis sem. Sed nec lacinia lorem.\n                      Duis arcu metus, cursus non odio quis, tincidunt tempor\n                      augue. Donec eget vestibulum risus. Nullam blandit quis\n                      est vitae feugiat hendrerit in erat. Duis interdum nisl\n                      risus, ac ultrices ipsum auctor at. Aliquam faucibus\n                      iaculis metus sit amet tincidunt. Vestibulum cursus urna\n                      vel nunc imperdiet suscipit. Ut eu augue egestas, porta\n                      orci lobortis, pharetra orci. Morbi eu tellus quis nisi\n                      tempor accumsan nec eu urna. empor, ullamcorper tortor.\n                      Mauris quis fermentum augue. Phasellus ac nisl hendrerit,\n                      fringilla enim aliquam, placerat odio. Ut tortor nisi,\n                      pellentesque sed nisi at, hendrerit imperdiet turpis.\n                      Proin interdum porttitor metus at hendrerit. Proin ipsum\n                      nisl, lacinia vitae purus ullamcorper, maximus convallis\n                      sem. Sed nec lacinia lorem. Duis arcu metus, cursus non\n                      odio quis, tincidunt tempor augue. Donec eget vestibulum\n                      risus. Nullam blandit quis est vitae feugiat.\n                    </div>\n                  </div>\n                </div>\n\n                <InfoRounded\n                  onClick={handleClick}\n                  style={{\n                    color: \"black\",\n                    fontSize: \"30px\",\n                    cursor: \"pointer\",\n                    marginTop: \"20px\",\n                  }}\n                />\n                <Popover\n                  id={id}\n                  open={open}\n                  onClose={handleClose}\n                  anchorEl={anchorEl}\n                  anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"left\",\n                  }}\n                  transformOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"top\",\n                  }}\n                >\n                  <Typography className={classes.typography}>\n                    <section className=\"guide\" id=\"how-to-add-handwriting\">\n                      <h2>How to add your own handwriting?</h2>\n                      <ul>\n                        <li>\n                          You will have to generate font of your handwriting.\n                        </li>\n                        <li>\n                          Websites like{\" \"}\n                          <Link href=\"https://www.calligraphr.com/en/\">\n                            Calligraphr\n                          </Link>{\" \"}\n                          can let you do that.\n                        </li>\n                        <li>\n                          Once you get .ttf file of your handwriting, upload it\n                          from upload button and boom! you will have your\n                          handwriting in the page.\n                        </li>\n                      </ul>\n                    </section>{\" \"}\n                  </Typography>{\" \"}\n                </Popover>\n              </div>\n            </div>\n          </Grid>\n          <Grid\n            item\n            xs={5}\n            style={{ display: styles.display, background: \"white\" }}\n          >\n            <div className=\"col output-container\">\n              <div id=\"output\" className=\"output\">\n                <img src={output} alt=\"note\" />\n              </div>\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  style={{ marginTop: \"20px\" }}\n                  className={`blue-B ${\n                    !styles.toggle ? \"hide-mobile\" : \"hide-pc\"\n                  } `}\n                  onClick={download}\n                >\n                  Download note\n                </Button>\n              </div>\n            </div>\n          </Grid>\n          <Grid item xs={2} style={{ background: \"white\" }}>\n            <form\n              className={classes.root}\n              style={{\n                border: styles.border,\n                background: styles.background,\n              }}\n              onSubmit={generate}\n            >\n              <label> Add your font </label>\n              <TextField\n                variant=\"outlined\"\n                type=\"file\"\n                className=\"form-control mt-3\"\n                name=\"font\"\n                onChange={fileChange}\n              />\n              <label> show margin </label>\n              <input\n                defaultChecked\n                color=\"primary\"\n                type=\"checkbox\"\n                className=\"form-control mt-3\"\n                checked={maginCheckbox.marginToggle}\n                name=\"mart\"\n                onChange={marginChange}\n              />\n\n              <label> show paper Line</label>\n              <input\n                defaultChecked\n                color=\"primary\"\n                type=\"checkbox\"\n                className=\"form-control mt-3\"\n                value={PaperCheckbox.paperLine}\n                name=\"paper\"\n                onChange={paperChange}\n              />\n              <label>Font Size</label>\n              <TextField\n                variant=\"outlined\"\n                type=\"number\"\n                className=\"form-control mt-3\"\n                min=\"0\"\n                name=\"fontSize\"\n                value={input.fontSize ? input.fontSize : \"12\"}\n                onChange={handleChange}\n                placeholder=\"font size\"\n              />\n              <label>vertical Position</label>\n              <TextField\n                variant=\"outlined\"\n                type=\"number\"\n                className=\"form-control mt-3\"\n                min=\"0\"\n                name=\"verticalPosition\"\n                value={input.verticalPosition ? input.verticalPosition : \"0\"}\n                onChange={handleChange}\n                placeholder=\"vertical position text\"\n              />\n              <label>Word spacing</label>\n              <TextField\n                variant=\"outlined\"\n                type=\"number\"\n                className=\"form-control mt-3\"\n                min=\"0\"\n                name=\"wordSpacing\"\n                value={input.wordSpacing ? input.wordSpacing : \"3\"}\n                onChange={handleChange}\n                placeholder=\"word spacing\"\n              />\n\n              <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">\n                  PenColor\n                </InputLabel>\n                <Select\n                  className=\"form-control mt-3\"\n                  labelId=\"demo-simple-select-outlined-label\"\n                  id=\"demo-simple-select-outlined\"\n                  label=\"PenColor\"\n                  onChange={color}\n                  value={colorChange.color}\n                  name=\"penColor\"\n                >\n                  <MenuItem value=\"#000F55\">Blue</MenuItem>\n                  <MenuItem value=\"#333\">Black</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">\n                  Font\n                </InputLabel>\n                <Select\n                  className=\"form-control mt-3\"\n                  labelId=\"demo-simple-select-outlined-label\"\n                  id=\"demo-simple-select-outlined\"\n                  label=\"font\"\n                  onChange={fontSelect}\n                  value={fontChange.font}\n                  name=\"font\"\n                >\n                  <MenuItem value=\"'Fattana'\">Fattana</MenuItem>\n                  <MenuItem value=\"'Homemade Apple', cursive\">\n                    Homemade Apple\n                  </MenuItem>\n\n                  <MenuItem value=\"'Franklin Gothic Medium'\">Franklin</MenuItem>\n                  <MenuItem value=\"'new-font'\">My Font</MenuItem>\n                </Select>\n              </FormControl>\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                className=\" btn btn-primary mb-2\"\n              >\n                Generate\n              </Button>\n            </form>\n          </Grid>\n        </Grid>\n      </Container>\n\n      <Container>\n        <div className=\"fut\">\n          Made with &hearts; by...\n          <Link\n            href=\"http://www.github.com/Qhristen\"\n            style={{\n              color: \"orange\",\n              cursor: \"pointer\",\n              textDecoration: \"none\",\n            }}\n          >\n            {\" \"}\n            Qhristen\n          </Link>{\" \"}\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Index from \"./Components/index\";\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div>\n      <Index />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}